definitions:
  dto.ErrorResponse:
    properties:
      errorCode:
        type: integer
      message:
        type: string
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/confirm-password-reset:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: ConfirmPasswordReset
      parameters:
      - description: reset-token
        in: path
        name: reset-token
        required: true
        type: string
      - description: newPassword
        in: formData
        name: newPassword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: ConfirmPasswordReset
      tags:
      - Authentication
  /auth/is-user-authenticated:
    get:
      description: IsUserAuthenticated
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: IsUserAuthenticated
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      responses:
        "200":
          description: Successfully logged in
        "400":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - Authentication
  /auth/logout:
    get:
      description: Logout
      responses:
        "200":
          description: OK
        "400":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Logout
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/request-password-reset:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: RequestPasswordReset
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: RequestPasswordReset
      tags:
      - Authentication
  /user:
    get:
      description: GetCurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: GetCurrentUser
      tags:
      - Users
  /user/change-password:
    patch:
      consumes:
      - application/json
      description: ChangePassword
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      responses:
        "200":
          description: Successfully changed password
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: ChangePassword
      tags:
      - Users
  /users:
    patch:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
